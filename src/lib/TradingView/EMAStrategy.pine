//@version=6
strategy("EMA-20 clears 3 EMAs + Optional Exits + Plot TR", 
  overlay=true, 
  default_qty_type=strategy.percent_of_equity, 
  default_qty_value=100)

// ——--- USER INPUTS ---——
emaFastLen = input.int(20, title="Fast EMA (entry)")
ema50Len   = input.int(50, title="EMA 50")
ema100Len  = input.int(100, title="EMA 100")
ema200Len  = input.int(200, title="EMA 200")

useTP = input.bool(true,  title="Use Take-Profit")
tpPct = input.float(2.0,  title="Take-Profit %",      minval=0.1, step=0.1)

useSL = input.bool(true,  title="Use Fixed Stop-Loss")
slPct = input.float(1.0,  title="Stop-Loss %",         minval=0.1, step=0.1)

useTR = input.bool(false, title="Use Trailing Stop")
trPct = input.float(1.0,  title="Trailing Stop %",     minval=0.1, step=0.1)

// ——--- EMA CALCS & PLOTS ---——
ema20  = ta.ema(close, emaFastLen)
ema50  = ta.ema(close, ema50Len)
ema100 = ta.ema(close, ema100Len)
ema200 = ta.ema(close, ema200Len)

plot(ema20,  color=color.white,  linewidth=2, title="EMA-20")
plot(ema50,  color=color.orange, linewidth=1, title="EMA-50")
plot(ema100, color=color.purple, linewidth=1, title="EMA-100")
plot(ema200, color=color.red,    linewidth=1, title="EMA-200")

// ——--- ENTRY LOGIC (long & short) ---——
longSignal  = ema20 > ema200 and ema20 > ema50 and ema20 > ema100
shortSignal = ta.crossunder(ema20, ema200) and ema20 < ema50 and ema20 < ema100

if longSignal
    if strategy.position_size < 0
        strategy.close("Short")
        strategy.entry("Long", strategy.long)
    else if strategy.position_size == 0
        strategy.entry("Long", strategy.long)

if shortSignal
    if strategy.position_size > 0
        strategy.close("Long")
        strategy.entry("Short", strategy.short)
    else if strategy.position_size == 0
        strategy.entry("Short", strategy.short)

// ——--- EXIT CALCULATIONS & TRAILING-STOP PLOT STATE ---——
var float tpPriceLong   = na
var float tpPriceShort  = na
var float slPriceLong   = na
var float slPriceShort  = na
var float trOffsetTick  = na
var float trailingStop  = na

inLong  = strategy.position_size > 0
inShort = strategy.position_size < 0

if strategy.position_size != 0
    entry     = strategy.position_avg_price
    ticksConv = 1.0 / syminfo.mintick
    // TP & fixed SL
    tpPriceLong  := inLong  and useTP ? entry * (1 + tpPct/100) : na
    tpPriceShort := inShort and useTP ? entry * (1 - tpPct/100) : na
    slPriceLong  := inLong  and useSL ? entry * (1 - slPct/100) : na
    slPriceShort := inShort and useSL ? entry * (1 + slPct/100) : na

    // On the very bar we enter, capture static tick-offset & initial stopLevel
    if useTR and na(trOffsetTick)
        trOffsetTick := (entry * trPct/100) * ticksConv
        // priceDist in raw price
        priceDist    = trOffsetTick * syminfo.mintick
        // set initial trailingStop
        trailingStop := inLong ? entry - priceDist : entry + priceDist
else
    // flat → reset
    trOffsetTick := na
    trailingStop := na

// update trailingStop each bar if enabled
priceDist = useTR and not na(trOffsetTick) ? trOffsetTick * syminfo.mintick : na
if useTR
    if inLong
        trailingStop := math.max(high  - priceDist, nz(trailingStop))
    else if inShort
        trailingStop := math.min(low   + priceDist, nz(trailingStop))
    else
        trailingStop := na

// ——--- APPLY EXITS ---——
if inLong
    strategy.exit("Long Exit",
      from_entry   = "Long",
      limit        = tpPriceLong,
      stop         = slPriceLong,
      trail_offset = trOffsetTick,
      trail_points = useTR ? 0 : na)

if inShort
    strategy.exit("Short Exit",
      from_entry   = "Short",
      limit        = tpPriceShort,
      stop         = slPriceShort,
      trail_points = useTR ? 0 : na,
      trail_offset = trOffsetTick)

// ——--- PLOT TRAILING STOP LEVEL — only when in a trade ———
stopLevel = useTR and strategy.position_size != 0 and not na(trailingStop)
  ? trailingStop
  : na

plot(stopLevel,title="Trailing Stop",color=color.aqua,linewidth=2,style=plot.style_linebr)